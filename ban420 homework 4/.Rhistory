sep = " ",
into = c("Seconds"),
extra = "drop")
}
tic("Test")
Sys.sleep(1)
toc(log = TRUE)
source("scripts/alt1.r")
# Load function for posting GQL-queries and retrieving data:
source(here("scripts/alt1.r"))
library(here)
# Load function for posting GQL-queries and retrieving data:
source(here("scripts/alt1.r"))
setwd("C:/Users/fredr/Documents/BAN400/parallel-computing-FredrikLaastad/ban420 homework 4")
# Load function for posting GQL-queries and retrieving data:
source(here("scripts/alt1.r"))
library(here)
# Load function for posting GQL-queries and retrieving data:
source(here("scripts/alt1.r"))
# Load function for posting GQL-queries and retrieving data:
source("scripts/alt1.r")
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
printTicTocLog() %>%
knitr::kable()
tic.clearlog()
printTicTocLog() %>%
knitr::kable()
tic("Alt1")
source("scripts/alt1.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
library(doParallel)
library(purrr)
library(furrr)
Cores <- min(parallel::detectCores(), maxcores)
maxcores <- 8
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
tibble(
N = df_res$N[i],
M = df_res$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
maxcores <- 8
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
tibble(
N = df_res$N[i],
M = df_res$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
# Assignment 1:
library(tweedie)
library(ggplot2)
# Assignment 1:
library(tweedie)
library(ggplot2)
library(doParallel)
library(furrr)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('magrittr', 'dplyr')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('tweedie', 'ggplot2')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
printTicTocLog() %>%
knitr::kable()
# Assignment 1:
library(tweedie)
library(ggplot2)
library(doParallel)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
maxcores <- 8
Cores <- min(parallel::detectCores(), maxcores)
# Instantiate the cores:
cl <- makeCluster(Cores)
# Next we register the cluster..
registerDoParallel(cl)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('tweedie', 'ggplot2')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('tweedie', 'ggplot2')
) %dopar%
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05
)
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('tweedie', 'ggplot2')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
# Take the time as before:
tic(paste0("Parallel loop, ", Cores, " cores"))
res <-
foreach(
i = 1:nrow(df),
.combine = 'rbind',
.packages = c('tweedie', 'dplyr')
) %dopar%
tibble(
N = df$N[i],
M = df$M[i],
sig=.05,
share_reject =
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
)
# Now that we're done, we close off the clusters
stopCluster(cl)
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
printTicTocLog() %>%
knitr::kable()
library(tictoc)
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Clear log
tic.clearlog()
#Timer for Alternative 1: No modifications of source
tic("Alt1")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2: Parallel
tic("Alt2")
source("scripts/alt2.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
#Clear log
tic.clearlog()
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Timer for Alternative 1: No modifications of source
tic("Alt1 Total")
source("scripts/alt1.r")
#Timer for Alternative 1: No modifications of source
tic("Alt1 Total")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2: Parallel
tic("Alt2 Total")
source("scripts/alt2.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
#Clear log
tic.clearlog()
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Clear log
tic.clearlog()
#Timer for Alternative 1:
tic("Alt1 Total - Default")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2:
tic("Alt2 Total - Parallel")
source("scripts/alt2.r")
toc(log = TRUE)
#Timer for Alternative 3:
tic("Alt3 Total - MTweedietests with furr")
source("scripts/alt3.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
printTicTocLog() %>%
knitr::kable()
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Timer for Alternative 3:
tic("Alt3 Total - MTweedietests with furr")
source("scripts/alt3.r")
toc(log = TRUE)
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Timer for Alternative 1:
tic("Alt1 Total - Sequential")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2:
tic("Alt2 Total - Parallel")
source("scripts/alt2.r")
toc(log = TRUE)
#Timer for Alternative 3:
tic("Alt3 Total - MTweedietests with furr")
source("scripts/alt3.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
#Clear log
tic.clearlog()
#Function for printing tictoc log to table
printTicTocLog <-
function() {
tic.log() %>%
unlist %>%
tibble(logvals = .) %>%
separate(logvals,
sep = ":",
into = c("Function type", "log")) %>%
mutate(log = str_trim(log)) %>%
separate(log,
sep = " ",
into = c("Seconds"),
extra = "drop")
}
#Timer for Alternative 1:
tic("Alt1 Total - Sequential")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2:
tic("Alt2 Total - Parallel")
source("scripts/alt2.r")
toc(log = TRUE)
#Timer for Alternative 3:
tic("Alt3 Total - MTweedietests with furr")
source("scripts/alt3.r")
toc(log = TRUE)
printTicTocLog() %>%
knitr::kable()
tic("Alt1 Total - Sequential")
source("scripts/alt1.r")
toc(log = TRUE)
#Timer for Alternative 2:
tic("Alt2 Total - Parallel")
source("scripts/alt2.r")
toc(log = TRUE)
#Timer for Alternative 3:
tic("Alt3 Total - MTweedietests with furrr")
source("scripts/alt3.r")
toc(log = TRUE)
